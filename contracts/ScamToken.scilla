scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils
library ScamToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp
  
(* Error events *)
type Error =
| CodeIsSender
| CodeInsufficientFunds
| CodeInsufficientAllowance
| CodeIsNotManagementContract
| CodeTransitionDisabled

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeIsSender                => Int32 -1
      | CodeInsufficientFunds       => Int32 -2
      | CodeInsufficientAllowance   => Int32 -3
      | CodeIsNotManagementContract => Int32 -4
      | CodeTransitionDisabled      => Int32 -5
      end
    in
    { _exception : "Error"; code : result_code }
  
let zero = Uint128 0

(* Dummy user-defined ADT *)
type Unit =
| Unit

let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero
  end

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract ScamToken
(
  contract_owner: ByStr20,
  name : String,
  symbol: String,
  decimals: Uint32,
  init_supply : Uint128,
  init_management_contract: ByStr20
)

(* Mutable fields *)

field total_supply : Uint128 = init_supply

field balances: Map ByStr20 Uint128 
  = let emp_map = Emp ByStr20 Uint128 in
    builtin put emp_map contract_owner init_supply

field allowances: Map ByStr20 (Map ByStr20 Uint128) 
  = Emp ByStr20 (Map ByStr20 Uint128)
  
(* management contract*)
field management_contract: ByStr20 = init_management_contract

(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsNotSender(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with
  | True =>
    err = CodeIsSender;
    ThrowError err
  | False =>
  end
end

(* @dev:   check if transition is called by management contract.  *)
(* @param: send_address: Address that sent transition             *)
procedure IsManagementContract(send_address: ByStr20)
  curr_management_contract <- management_contract;
  (*check if sender of transition is the management contract*)
  is_management_contract = builtin eq send_address curr_management_contract;
  match is_management_contract with
  | False =>
    err = CodeIsNotManagementContract;
    ThrowError err
  | True =>
  end
end  

(* @dev:   mint tokens for recipient.                                         *)
(* @param: recipient: Address of the recipient whose balance is to increase.  *)
(* @param: amount:    Number of tokens to be minted.                          *)
procedure AuthorizedMint(recipient: ByStr20, amount: Uint128) 
  some_bal <- balances[recipient];
  bal = get_val some_bal;
  new_balance = builtin add amount bal;
  balances[recipient] := new_balance;
  current_total_supply <- total_supply;
  new_total_supply = builtin add current_total_supply amount;
  total_supply := new_total_supply;
  e = {_eventname: "Minted"; minter: _sender; recipient: recipient; amount: amount};
  event e
end

(* @dev:   Burn existing tokens. If from balance less than amount, error.          *)
(* @param: burn_account: Address of the token_owner whose balance is to decrease.  *)
(* @param: amount:       Number of tokens to be burned.                            *)
procedure AuthorizedBurnIfSufficientBalance(burn_account: ByStr20, amount: Uint128)
  o_get_bal <- balances[burn_account];
  bal = get_val o_get_bal;
  can_burn = uint128_le amount bal;
  match can_burn with
  | True =>
    (* Subtract amount from from *)
    new_balance = builtin sub bal amount;
    balances[burn_account] := new_balance;
    current_total_supply <- total_supply;
    new_total_supply = builtin sub current_total_supply amount;
    total_supply := new_total_supply;
    e = {_eventname: "Burnt"; burner: _sender; burn_account: burn_account; amount: amount};
    event e  
  | False =>
    err = CodeInsufficientFunds;
    ThrowError err
  end
end


(***************************************)
(*             Transitions             *)
(***************************************)
(*Only managers in management contract can call transitions*)

(* @dev:   Change management contract *)
(* @param: new_management_contract: Address of new management contract.                                        *)
transition ChangeManagementContract(new_management_contract: ByStr20)
  IsManagementContract _sender;
  management_contract := new_management_contract;
  e = {_eventname: "ChangedManagementContract"; new_management_contract: new_management_contract};
  event e  
end

(* @dev:   Mint new tokens.                                                   *)
(* @param: recipient: Address of the recipient whose balance is to increase.  *)
(* @param: amount:    Number of tokens to be minted.                          *)
transition Mint(recipient: ByStr20, amount: Uint128)
  IsManagementContract _sender;
  AuthorizedMint recipient amount;
    (* Prevent sending to a contract address that does not support transfers of token *)
  msg_to_recipient = {_tag: "RecipientAcceptMint"; _recipient: recipient; _amount: zero; 
                      minter: _sender; recipient: recipient; amount: amount};
  msgs = one_msg msg_to_recipient;
  send msgs
end

(* @dev:   Burn existing tokens.                                                   *)
(* @param: burn_account: Address of the token_owner whose balance is to decrease.  *)
(* @param: amount:       Number of tokens to be burned.                            *)
transition Burn(burn_account: ByStr20, amount: Uint128)
  IsManagementContract _sender;
  AuthorizedBurnIfSufficientBalance burn_account amount;
  msg_to_sender = {_tag : "BurnSuccessCallBack"; _recipient : burn_account; _amount : zero; 
                    burner : _sender; burn_account : burn_account; amount : amount};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* Unreachable transitions to conform to ZRC2-specifications *)

(* @dev: Increase the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke.   *)
(* param spender:      Address of the designated approved_spender.                                                   *)
(* param amount:       Number of tokens to be increased as allowance for the approved_spender.                       *)
transition IncreaseAllowance(spender: ByStr20, amount: Uint128)
  err = CodeTransitionDisabled;
  ThrowError err
end

(* @dev: Decrease the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke. *)
(* param spender:      Address of the designated approved_spender.                                                 *)
(* param amount:       Number of tokens to be decreased as allowance for the approved_spender.                     *)
transition DecreaseAllowance(spender: ByStr20, amount: Uint128)
  err = CodeTransitionDisabled;
  ThrowError err
end

(* @dev: Moves an amount tokens from _sender to the recipient. Used by token_owner. *)
(* @dev: Balance of recipient will increase. Balance of _sender will decrease.      *)
(* @param to:  Address of the recipient whose balance is increased.                 *)
(* @param amount:     Amount of tokens to be sent.                                  *)
transition Transfer(to: ByStr20, amount: Uint128)
  err = CodeTransitionDisabled;
  ThrowError err;
  e = {_eventname : "TransferSuccess"; sender : _sender; recipient : to; amount : amount};
  event e
end

(* @dev: Move a given amount of tokens from one address to another using the allowance mechanism. The caller must be an approved_spender. *)
(* @dev: Balance of recipient will increase. Balance of token_owner will decrease.                                                        *)
(* @param from:    Address of the token_owner whose balance is decreased.                                                                 *)
(* @param to:      Address of the recipient whose balance is increased.                                                                   *)
(* @param amount:  Amount of tokens to be transferred.                                                                                    *)
transition TransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  err = CodeTransitionDisabled;
  ThrowError err
end