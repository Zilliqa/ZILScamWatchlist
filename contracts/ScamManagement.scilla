scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils
library ScamManagement

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let two_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp
  
let three_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
fun (msg3 : Message) =>
  let msgs_tmp = two_msgs msg2 msg3 in
  Cons {Message} msg1 msgs_tmp
  
(* Error events *)
type Error =
| CodeIsNotManager
| CodeIsNotAdmin
| CodeAdminExists
| CodeAdminNotExists
| CodeManagerExists
| CodeManagerNotExists
| CodeIsNotAdminOrManager



let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeIsNotManager         => Int32 -1
      | CodeIsNotAdmin           => Int32 -2
      | CodeAdminExists          => Int32 -3
      | CodeAdminNotExists       => Int32 -4
      | CodeManagerExists        => Int32 -5
      | CodeManagerNotExists     => Int32 -6
      | CodeIsNotAdminOrManager  => Int32 -7
      end
    in
    { _exception : "Error"; code : result_code }
  
let zero = Uint128 0

(* Dummy user-defined ADT *)
type Unit =
| Unit

let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero
  end

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract ScamManagement
(
  init_scam_token_address: ByStr20,
  init_scam_url_address: ByStr20,
  init_manager_tracking_address: ByStr20,
  init_admin: ByStr20
)

(* Mutable fields *)

(* List of minters available *)

field admins: Map ByStr20 Unit 
  = let emp_map = Emp ByStr20 Unit in
    let authorize = Unit in
    builtin put emp_map init_admin authorize
    
field managers: Map ByStr20 Unit 
  = Emp ByStr20 Unit 
    
field scam_token_address: ByStr20 = init_scam_token_address

field scam_url_address: ByStr20 = init_scam_url_address

field manager_tracking_address: ByStr20 = init_manager_tracking_address
(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

(* @dev:   Checks if address is in admin list                   *)
(* @param: manager: Address of the admin to be checked          *)
(* Returns error event CodeIsNotAdmin if admin is not in list   *)
procedure isAdmin(address: ByStr20)
  some_admin <- admins[address];
  match some_admin with
  | None =>
    err = CodeIsNotAdmin;
    ThrowError err   
  | Some val => 
  end
end

(* @dev:   Checks if address is in manager list                   *)
(* @param: manager: Address of the manager to be checked          *)
(* Returns error event CodeIsNotManager if manager is not in list *)
procedure isManager(address: ByStr20)
  some_manager <- managers[address];
  match some_manager with
  | None =>
    err = CodeIsNotManager;
    ThrowError err   
  | Some val => 
  end
end

procedure isAdminOrManager(address: ByStr20)
  some_manager <- managers[address];
  match some_manager with
  | None =>
    some_admin <- admins[address];
    match some_admin with
    | None =>
      err = CodeIsNotAdminOrManager;
      ThrowError err   
    | Some val => 
    end  
  | Some val => 
  end
end


(***************************************)
(*             Transitions             *)
(***************************************)

(* @dev:   Add approved admins. Only existing admins can add admins. *)
(* @param: admin: Address of the admin to be approved                  *)
(* Returns error event CodeAdminExists if admin already approved       *)
transition AddAdmins(admin: ByStr20)
  isAdmin _sender;
  some_admin <- admins[admin];
  match some_admin with
  | Some val => 
    err = CodeAdminExists;
    ThrowError err
  | None =>
    authorize = Unit;
    admins[admin] := authorize;
    (* Emit success event *)
    e = {_eventname: "AddAdminSuccess"; admin: admin};
    event e
  end
end

(* @dev:   Remove approved admins. Only existing admins can remove managers. *)
(* @param: admin: Address of the admin to be remove                          *)
(* Returns error event CodeAdminNotExists if admin is already not approved   *)
transition RemoveAdmins(admin: ByStr20)
  isAdmin _sender;
  some_admin <- admins[admin];
  match some_admin with
  | Some val => 
    delete admins[admin];
    (* Emit success event *)
    e = {_eventname: "RemoveAdminSuccess"; admin: admin};
    event e
  | None =>
    err = CodeAdminNotExists;
    ThrowError err
  end
end

(* @dev:   Add approved managers. Only existing managers can add managers. *)
(* @param: manager: Address of the manager to be approved                  *)
(* Returns error event CodeManagerExists if manager already approved       *)
transition AddManagers(manager: ByStr20)
  isAdmin _sender;
  some_manager <- managers[manager];
  match some_manager with
  | Some val => 
    err = CodeManagerExists;
    ThrowError err
  | None =>
    authorize = Unit;
    managers[manager] := authorize;
    (* Emit success event *)
    e = {_eventname: "AddManagerSuccess"; manager: manager};
    event e
  end
end

(* @dev:   Remove approved managers. Only existing managers can remove managers. *)
(* @param: manager: Address of the manager to be remove                          *)
(* Returns error event CodeManagerNotExists if manager is already not approved   *)
transition RemoveManagers(manager: ByStr20)
  isAdmin _sender;
  some_manager <- managers[manager];
  match some_manager with
  | Some val => 
    delete managers[manager];
    (* Emit success event *)
    e = {_eventname: "RemoveManagerSuccess"; manager: manager};
    event e
  | None =>
    err = CodeManagerNotExists;
    ThrowError err
  end
end

(* @dev:   Change scam_token_address field to new_scam_token_address   *)
(* @param: new_scam_token_address: scam token address to be changed to *)
transition ChangeScamTokenAddress(new_scam_token_address: ByStr20)
  isAdmin _sender;
  scam_token_address := new_scam_token_address;
  e = {_eventname: "ChangedScamTokenAddress"; new_scam_token_address: new_scam_token_address};
  event e  
end

(* @dev:   Change scam_url_address field to new_scam_url_address   *)
(* @param: new_scam_url_address: scam url address to be changed to *)
transition ChangeScamURLAddress(new_scam_url_address: ByStr20)
  isAdmin _sender;
  scam_url_address := new_scam_url_address;
  e = {_eventname: "ChangedScamURLAddress"; new_scam_url_address: new_scam_url_address};
  event e  
end

(* @dev:   Change manager_tracking_address field to new_manager_tracking_address   *)
(* @param: new_manager_tracking_address: new manager_tracking address to be changed to *)
transition ChangeManagerTrackingAddress(new_manager_tracking_address: ByStr20)
  isAdmin _sender;
  manager_tracking_address := new_manager_tracking_address;
  e = {_eventname: "ChangedManagerTrackingAddress"; new_manager_tracking_address: new_manager_tracking_address};
  event e  
end

(* call transitions in ScamToken contract*)

(*Change all 3 contracts' management contract to new_management_contract*)
transition CallChangeScamManagementContract(new_management_contract: ByStr20)
  isAdmin _sender;
  token_address <- scam_token_address;
  msg_to_scam_token = {_tag: "ChangeManagementContract"; _recipient: token_address; _amount: zero; 
  new_management_contract: new_management_contract};
  msgs = one_msg msg_to_scam_token;
  send msgs
end

transition CallChangeScamURLManagementContract(new_management_contract: ByStr20)
  isAdmin _sender;
  url_address <- scam_url_address;
  msg_to_scam_url = {_tag: "ChangeManagementContract"; _recipient: url_address; _amount: zero; 
  new_management_contract: new_management_contract};
  msgs = one_msg msg_to_scam_url;
  send msgs
end

transition CallChangeManagerTrackingManagementContract(new_management_contract: ByStr20)
  isAdmin _sender;
  tracking_address <- manager_tracking_address;
  msg_to_manager_tracking = {_tag: "ChangeManagementContract"; _recipient: tracking_address; _amount: zero; 
  new_management_contract: new_management_contract};
  msgs = one_msg msg_to_manager_tracking;
  send msgs
end

(*Change all 3 contracts' management contract to new_management_contract*)
transition CallChangeAllManagementContract(new_management_contract: ByStr20)
  isAdmin _sender;
  token_address <- scam_token_address;
  msg_to_scam_token = {_tag: "ChangeManagementContract"; _recipient: token_address; _amount: zero; 
  new_management_contract: new_management_contract};
  url_address <- scam_url_address;
  msg_to_scam_url = {_tag: "ChangeManagementContract"; _recipient: url_address; _amount: zero; 
  new_management_contract: new_management_contract};
  tracking_address <- manager_tracking_address;
  msg_to_manager_tracking = {_tag: "ChangeManagementContract"; _recipient: tracking_address; _amount: zero; 
  new_management_contract: new_management_contract};
  msges = three_msgs msg_to_scam_token msg_to_scam_url msg_to_manager_tracking;
  send msges
end

transition CallMint(recipient: ByStr20, amount: Uint128)
  isAdminOrManager _sender;
  address <- scam_token_address;
  msg_to_scam_token = {_tag: "Mint"; _recipient: address; _amount: zero; recipient: recipient; amount: amount};
  msgs = one_msg msg_to_scam_token;
  send msgs
end

transition CallBurn(burn_account: ByStr20, amount: Uint128)
  isAdminOrManager _sender;
  address <- scam_token_address;
  msg_to_scam_token = {_tag : "Burn"; _recipient : address; _amount : zero; 
                    burn_account : burn_account; amount : amount};
  msgs = one_msg msg_to_scam_token;
  send msgs
end

(* call transitions in ScamURL contract*)

transition CallAddURL(url: String, category: String)
  isAdminOrManager _sender;
  address <- scam_url_address;
  msg_to_scam_url = {_tag : "AddURL"; _recipient : address; _amount : zero; 
                  url: url; category: category};
  msgs = one_msg msg_to_scam_url;
  send msgs
end

transition CallRemoveURL(url: String)
  isAdminOrManager _sender;
  address <- scam_url_address;
  msg_to_scam_url = {_tag : "RemoveURL"; _recipient : address; _amount : zero; 
                  url: url};
  msgs = one_msg msg_to_scam_url;
  send msgs
end

transition CallAddDomain(domain: String, category: String)
  isAdminOrManager _sender;
  address <- scam_url_address;
  msg_to_scam_url = {_tag : "AddDomain"; _recipient : address; _amount : zero; 
                  domain: domain; category: category};
  msgs = one_msg msg_to_scam_url;
  send msgs
end

transition CallRemoveDomain(domain: String)
  isAdminOrManager _sender;
  address <- scam_url_address;
  msg_to_scam_url = {_tag : "RemoveDomain"; _recipient : address; _amount : zero; 
                  domain: domain};
  msgs = one_msg msg_to_scam_url;
  send msgs
end

(* call transitions in ManagerTracking contract*)

transition CallAddAdmin(user_id: String, role: String)
  isAdminOrManager _sender;
  address <- manager_tracking_address;
  msg_to_manager_tracking = {_tag : "AddAdmin"; _recipient : address; _amount : zero; 
                  user_id: user_id; role: role};
  msgs = one_msg msg_to_manager_tracking;
  send msgs
end

transition CallRemoveAdmin(user_id: String)
  isAdminOrManager _sender;
  address <- manager_tracking_address;
  msg_to_manager_tracking = {_tag : "RemoveAdmin"; _recipient : address; _amount : zero; 
                  user_id: user_id};
  msgs = one_msg msg_to_manager_tracking;
  send msgs
end